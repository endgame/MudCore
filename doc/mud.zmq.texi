@node mud.zmq
@section mud.zmq

The @code{mud.zmq} table has functions for commmunication with external
programs, via the ZeroMQ messaging library. The server maintains an
internal ZeroMQ context and user code can create sockets registered to
that context. Lua code may also arrange to be notified when a socket's
state changes (becomes readable or writeable). The interface is inspired
by lua-zmq (@url{https://github.com/Neopallium/lua-zmq}), but has been
changed to integrate with mudcore's event loop. Since the sockets are
integrated into the event loop, they can run only as fast as the
server's pulse rate. This means that you may want to introduce a caching
layer if response time is super-important.

Constants defined in the ZeroMQ C API (@code{ZMQ_FOO}) are exposed as
@code{mud.zmq.FOO}. This includes option flags.

A note on type conversion: socket options accept and return different
types depending on the option specified:
@itemize
@item
  All integers are converted to Lua integers, regardless of size.
@item
  Options that have a value of either 0 or 1 take and return Lua
  booleans.
@item
  String options that are reset by passing @code{NULL} in C accept Lua's
  @code{nil}.
@item
  CURVE keys are returned as Z85-encoded strings, but you can pass in
  strings as either Z85-encoded strings or binary data (in a Lua
  string).
@end itemize

@defun mud.zmq.getopt (@var{option})
@defunx mud.zmq.setopt (@var{option}, @var{value})
Alter options on the server's ZeroMQ context. Corresponds to
@code{zmq_ctx_get()} and @code{zmq_ctx_set()}. @var{option} is one of
the following constants:
@itemize
@item @code{mud.zmq.IO_THREADS}
@item @code{mud.zmq.MAX_SOCKETS}
@item @code{mud.zmq.IPV6}
@end itemize

@var{value} is an integer.
@end defun

@defun mud.zmq.socket (@var{type})
Create and return a ZeroMQ socket. @var{type} is one of the following
constants:
@itemize
@item @code{mud.zmq.REQ}
@item @code{mud.zmq.REP}
@item @code{mud.zmq.DEALER}
@item @code{mud.zmq.ROUTER}
@item @code{mud.zmq.PUB}
@item @code{mud.zmq.SUB}
@item @code{mud.zmq.XPUB}
@item @code{mud.zmq.XSUB}
@item @code{mud.zmq.PUSH}
@item @code{mud.zmq.PULL}
@item @code{mud.zmq.PAIR}
@end itemize

The returned socket is a Lua userdatum with type
@code{mudcore.zmq_socket}.
@end defun

@defun mud.zmq.version ()
Return a table @code{@{MAJOR, MINOR, PATCHLEVEL@}} corresponding to the
ZeroMQ version.
@end defun

@defun mud.zmq.z85_decode (@var{string})
@defunx mud.zmq.z85_encode (@var{binary})
Decode a Z85-encoded @var{string} into its binary representation, or
encode @var{binary} data (also stored as a Lua string) into a
Z85-encoded string.
@end defun

@defmethod mudcore.zmq_socket bind (@var{endpoint})
Bind the socket to @var{endpoint}.
@end defmethod

@defmethod mudcore.zmq_socket close ()
Close the socket.
@end defmethod

@defmethod mudcore.zmq_socket connect (@var{endpoint})
Connect the socket to @var{endpoint}.
@end defmethod

@defmethod mudcore.zmq_socket getopt (@var{option})
Look up a socket option. Valid options are:
@itemize
@item @code{mud.zmq.AFFINITY}
@item @code{mud.zmq.BACKLOG}
@item @code{mud.zmq.CURVE_PUBLICKEY}
@item @code{mud.zmq.CURVE_SECRETKEY}
@item @code{mud.zmq.CURVE_SERVERKEY}
@item @code{mud.zmq.CURVE_SERVER}
@item @code{mud.zmq.EVENTS}
@item @code{mud.zmq.FD}
@item @code{mud.zmq.IDENTITY}
@item @code{mud.zmq.IMMEDIATE}
@item @code{mud.zmq.IPV6}
@item @code{mud.zmq.LAST_ENDPOINT}
@item @code{mud.zmq.LINGER}
@item @code{mud.zmq.MAXMSGSIZE}
@item @code{mud.zmq.MECHANISM}
@item @code{mud.zmq.MULTICAST_HOPS}
@item @code{mud.zmq.PLAIN_PASSWORD}
@item @code{mud.zmq.PLAIN_SERVER}
@item @code{mud.zmq.PLAIN_USERNAME}
@item @code{mud.zmq.RATE}
@item @code{mud.zmq.RCVBUF}
@item @code{mud.zmq.RCVHWM}
@item @code{mud.zmq.RCVMORE}
@item @code{mud.zmq.RCVTIMEO}
@item @code{mud.zmq.RECONNECT_IVL_MAX}
@item @code{mud.zmq.RECONNECT_IVL}
@item @code{mud.zmq.RECOVERY_IVL}
@item @code{mud.zmq.SNDBUF}
@item @code{mud.zmq.SNDHWM}
@item @code{mud.zmq.SNDTIMEO}
@item @code{mud.zmq.TCP_KEEPALIVE_CNT}
@item @code{mud.zmq.TCP_KEEPALIVE_IDLE}
@item @code{mud.zmq.TCP_KEEPALIVE_INTVL}
@item @code{mud.zmq.TCP_KEEPALIVE}
@item @code{mud.zmq.TYPE}
@item @code{mud.zmq.ZAP_DOMAIN}
@end itemize
See the man page for @code{zmq_getsockopt} for a list of option
descriptions and what is returned for each.
@end defmethod

@defmethod mudcore.zmq_socket recv (@var{flags} = 0)
Receive a message on the socket and return it as a string. @var{flags}
is a combination of zero or more of the following flags:
@itemize
@item @code{mud.zmq.DONTWAIT}
@end itemize
See the man page for @code{zmq_msg_recv} for a description of each flag.
@end defmethod

@defmethod mudcore.zmq_socket setopt (@var{option}, @var{value})
Set a socket option. Valid options are:
@itemize
@item @code{mud.zmq.AFFINITY}
@item @code{mud.zmq.BACKLOG}
@item @code{mud.zmq.CONFLATE}
@item @code{mud.zmq.CURVE_PUBLICKEY}
@item @code{mud.zmq.CURVE_SECRETKEY}
@item @code{mud.zmq.CURVE_SERVERKEY}
@item @code{mud.zmq.CURVE_SERVER}
@item @code{mud.zmq.IDENTITY}
@item @code{mud.zmq.IMMEDIATE}
@item @code{mud.zmq.IPV6}
@item @code{mud.zmq.LINGER}
@item @code{mud.zmq.MAXMSGSIZE}
@item @code{mud.zmq.MULTICAST_HOPS}
@item @code{mud.zmq.PLAIN_PASSWORD}
@item @code{mud.zmq.PLAIN_SERVER}
@item @code{mud.zmq.PLAIN_USERNAME}
@item @code{mud.zmq.PROBE_ROUTER}
@item @code{mud.zmq.RATE}
@item @code{mud.zmq.RCVBUF}
@item @code{mud.zmq.RCVHWM}
@item @code{mud.zmq.RCVTIMEO}
@item @code{mud.zmq.RECONNECT_IVL_MAX}
@item @code{mud.zmq.RECONNECT_IVL}
@item @code{mud.zmq.RECOVERY_IVL}
@item @code{mud.zmq.REQ_CORRELATE}
@item @code{mud.zmq.REQ_RELAXED}
@item @code{mud.zmq.ROUTER_MANDATORY}
@item @code{mud.zmq.SNDBUF}
@item @code{mud.zmq.SNDHWM}
@item @code{mud.zmq.SNDTIMEO}
@item @code{mud.zmq.SUBSCRIBE}
@item @code{mud.zmq.TCP_ACCEPT_FILTER}
@item @code{mud.zmq.TCP_KEEPALIVE_CNT}
@item @code{mud.zmq.TCP_KEEPALIVE_IDLE}
@item @code{mud.zmq.TCP_KEEPALIVE_INTVL}
@item @code{mud.zmq.TCP_KEEPALIVE}
@item @code{mud.zmq.UNSUBSCRIBE}
@item @code{mud.zmq.XPUB_VERBOSE}
@item @code{mud.zmq.ZAP_DOMAIN}
@end itemize
See the man page for @code{zmq_setsockopt} for a list of option
descriptions and what parameter is expected for the option's value.
@end defmethod

@defmethod mudcore.zmq_socket send (@var{msg}, @var{flags} = 0)
Send @var{msg} (a string, or convertible to a string) on the
socket. @var{flags} is a combination of zero or more of the following
flags:
@itemize
@item @code{mud.zmq.DONTWAIT}
@item @code{mud.zmq.SNDMORE}
@end itemize
See the man page for @code{zmq_msg_send} for a description of each flag.
@end defmethod

@defmethod mudcore.zmq_socket watch (@var{in_func} = @code{nil}, @
                                     @var{out_func} = @code{nil})

Watch this socket for events, hooking it into the main event loop (that
also processes telnet I/O on regular sockets). If any watchers are set
on a socket, it cannot be garbage collected. @var{in_func} and
@var{out_func} are functions that take a single argument: the socket
being watched. If @var{in_func} and @var{out_func} are both @code{nil},
the watcher is removed entirely, allowing the socket to be collected if
nothing else is using it. It's better to call @code{:close()} explicitly
than relying on the GC, though.
@end defmethod
