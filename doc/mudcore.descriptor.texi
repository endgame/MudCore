@node mudcore.descriptor
@section mudcore.descriptor

The @code{mudcore.descriptor} table holds the primitives for socket
operations. Each client gets its own lua thread, and can block until
input is available. Descriptors are exposed as a Lua userdatum with type
@code{mudcore.descriptor}. Method calls on a descriptor are looked up in
the @code{mudcore.descriptor} table, so you can define additional methods
there. Unless noted otherwise, methods can be called upon descriptors in
other threads.

@defmethod mudcore.descriptor close ()
Put a descriptor into the @emph{draining} state; no new input can be
received and the descriptor will close after all pending output has been
sent. If the descriptor being closed belongs to the current thread, that
thread will be stopped.
@end defmethod

@defmethod mudcore.descriptor delay (@var{delay})
Pause the descriptor until @var{delay} seconds have passed. You'll
rarely want to use this function, since it looks like lag on the client
end.
@end defmethod

@defmethod mudcore.descriptor extra_data ()
Get the descriptor's extra_data table directly. Unless you're passing
the table to @code{pairs()} or @code{ipairs()}, you can just use table
syntax on the descriptor object itself.
@end defmethod

@defmethod mudcore.descriptor is_active ()
Return @code{true} if and only if the descriptor corresponds to the
currently executing thread.
@end defmethod

@defmethod mudcore.descriptor on_close ()
This callback, if defined, is called when a descriptor closes. The
descriptor won't be suitable for writing at this point, but it's a good
place to remove references to it from your data structures.
@end defmethod

@defmethod mudcore.descriptor on_command (@var{command})
This callback is called whenever a complete line is received on the
socket. The default implementation is equivalent to the following lua
code:

@example
function mudcore.descriptor:on_command(command)
  if #self.command_queue >= 10 then
    self:send('Input queue full. Command discarded.\r\n')
  else
    table.insert(self.command_queue, command)
  end
end
@end example

You should only need to override this command if you have special
requirements, like high-priority commands that jump to the front of the
queue, or commands that clear the input queue.
@end defmethod

@defmethod mudcore.descriptor on_open ()
@strong{Your code needs to define this.} It is the entry point for new
threads. If you don't, clients will be dropped.
@end defmethod

@defmethod mudcore.descriptor read ()
Pause this thread until the next input line is available. The thread
will be reactivated once the new line arrives. It is an error to call
this on descriptors belonging to other threads.

Descriptors will only be given one command per server pulse, which is
100 milliseconds by default (@pxref{Invocation}). The order in which the
descriptors are fed commands is random, to prevent some clients from
having an unfair advantage.
@end defmethod

@defmethod mudcore.descriptor send (@var{str})
Send @var{str} to the descriptor.
@end defmethod

@defmethod mudcore.descriptor will_echo (@var{will})
Manipulate the telnet ECHO option. Turning the option on means that the
server is responsible for echoing input. Turning it on but echoing
nothing is common when accepting password input.
@end defmethod

Descriptors also have several instance variables, described below. They
can store additional fields beyond those listed here, as each descriptor
contains its own private table. Access these fields as if the descriptor
was a regular table.

@defivar mudcore.descriptor command_queue
The command queue is a regular Lua table that is a sequence of the
received commands awaiting processing. Commands are removed from the
front of the queue (element 1) and remaining commands are shifted down
to fill the gap.
@end defivar

@defivar mudcore.descriptor prompt
Each descriptor has an independent callback for sending a prompt. This
is either a string or a function of one argument, the descriptor. The
server ensures that any output sent starts on a fresh line, and you
shouldn't write a newline after you're finished sending.
@end defivar

@defivar mudcore.descriptor width
@defivarx mudcore.descriptor height
If the client connected to the descriptor supports RFC 1073 (Telnet
window size option), these fields contain the client window's width and
height in characters. If not, both are @code{nil}.

Because client windows can resize at any time, it's worth checking these
values frequently, particularly before doing any sort of paging on the
client's behalf.

These fields will be overwritten by the server every time it receives a
new NAWS message. If the client disables NAWS, they will be set back to
@code{nil}.
@end defivar
