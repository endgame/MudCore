\input texinfo @c -*- texinfo -*-
@include version.texi

@c %**start of header
@setfilename mudcore.info
@settitle MudCore Reference Manual, Version @value{VERSION}
@c %**end of header

@dircategory Network Applications
@direntry
* mudcore: (mudcore).           MudCore - A lua-powered MUD (telnet) server.
@end direntry

@copying
This manual is for MudCore, version @value{VERSION}.

Copyright @copyright{} 2011, 2012 Jack Kelly.

@quotation
This work is licensed under the Creative Commons Attribution-ShareAlike
3.0 Unported License. To view a copy of this license, visit
@url{http://creativecommons.org/licenses/by-sa/3.0/} or send a letter to
Creative Commons, 444 Castro Street, Suite 900, Mountain View,
California, 94041, USA.
@end quotation
@end copying

@titlepage
@title MudCore Reference Manual, Version @value{VERSION}
@author Jack Kelly

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top MudCore Reference Manual

This manual is for MudCore, version @value{VERSION}.
@end ifnottex

@menu
* Concept::                     What MudCore is, and what it is not.
* Invocation::                  What goes on the command-line.
* Concurrency Model::           How connections are multiplexed.
* Lua Reference::               Functions available to Lua code.
* C Reference::                 Autogenerated documentation for C functions.
* Function Index::              Index of functions.
* Type Index::                  Index of data types.
* Variable Index::              Index of variables.
@end menu

@node Concept
@chapter Concept

MudCore is a telnet server, designed to be a lightweight base for a
developer to build a MUD-style game. It's meant to sit somewehere
between ultra-minimalist codebases like SocketMud and more complete
codebases like NakedMud. The core is an event loop written in C which
multiplexes telnet sockets, timers and ZeroMQ sockets
(@url{http://www.zeromq.org}), for communication with other
programs. The developer implements the game itself in Lua, and each
client is given an individual Lua thread.

Modifying the C code shouldn't be necessary for most developers.

@node Invocation
@chapter Invocation

Running @code{mudcore} starts the mud. Log files are written to
@code{./log}. Once sockets are opened, the Lua interpreter is started
and @code{./boot.lua} is run. Control is then handed to the main loop.

The following options modify the behaviour of the server:

@table @samp
@item -(no-)file-logging
(Dis)able logging to files.

@item -log-level=@{debug,info,warn,error,fatal@}
Set the logging level.

@item -port=PORT
Set the port for the mud's main socket.

@item -pulse-length=LENGTH
Override the MUD's default pulse length (100 milliseconds). This value
is given in microseconds.
@end table

All command-line arguments are available to Lua code. @xref{mud.args}.

@node Concurrency Model
@chapter Concurrency Model

Lua threads are cooperatively multitasked, so each thread will run until
it is forced to yield, either by a call to @code{mud.descriptor.delay()}
or @code{mud.descriptor.read()} (@pxref{mud.descriptor}). During each
iteration of the event loop, a client thread can consume at most one
command from its queue of received commands.

ZeroMQ sockets will block on reading if there is no data available. To
avoid stopping the entire server when this happens, register a callback
for when data is available on the socket, using
@code{mud.zmq_socket:watch()} (@pxref{mud.zmq}).

@node Lua Reference
@chapter Lua reference

This chapter details the functions available to Lua code. All functions
are accessed through the global @code{mud} table.

@defun mud.shutdown ()
Shut down the mud.
@end defun

@menu
* mud.args::                   Access the command-line arguments.
* mud.descriptor::             Socket (descriptor) operations.
* mud.log::                    Logging facility.
* mud.timer::                  Set functions to be called in the future.
* mud.zmq::                    Communicate with external programs using ZeroMQ.
@end menu

@include mud.args.texi
@include mud.descriptor.texi
@include mud.log.texi
@include mud.timer.texi
@include mud.zmq.texi

@node C Reference
@chapter C Reference
This chapter contains autogenerated documentation extracted from each C
header.

@menu
* arg_parse.h::                 Argument parsing.
* buffer.h::                    Circular buffers.
* descriptor.h::                Encapsulated FDs for telnet clients.
* io.h::                        Main input/output routines.
* log.h::                       Logging facility.
* lua_api.h::                   Lua API.
* lua_args.h::                  Lua command-line arguments.
* lua_descriptor.h::            Socket operations for Lua code.
* lua_log.h::                   Logging from Lua code.
* lua_zmq.h::                   Using ZeroMQ from Lua code.
* options.h::                   Command-line options used by C code.
* socket.h::                    Basic socket operations.
* timeval.h::                   Utility functions for struct timeval.
@end menu

@include arg_parse.h.texi
@include buffer.h.texi
@include descriptor.h.texi
@include io.h.texi
@include log.h.texi
@include lua_api.h.texi
@include lua_args.h.texi
@include lua_descriptor.h.texi
@include lua_log.h.texi
@include lua_zmq.h.texi
@include options.h.texi
@include socket.h.texi
@include timeval.h.texi

@node Function Index
@unnumbered Function Index
@printindex fn

@node Type Index
@unnumbered Type Index
@printindex tp

@node Variable Index
@unnumbered Variable Index
@printindex vr

@bye
